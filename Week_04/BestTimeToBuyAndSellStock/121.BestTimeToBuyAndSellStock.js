// 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。

// 如果你最多只允许完成一笔交易（即买入和卖出一支股票），
// 设计一个算法来计算你所能获取的最大利润。

// 注意你不能在买入股票前卖出股票。

// 示例 1:

// 输入: [7,1,5,3,6,4]
// 输出: 5
// 解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，
// 最大利润 = 6-1 = 5 。
//      注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。
// 示例 2:

// 输入: [7,6,4,3,1]
// 输出: 0
// 解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
// ***************************************************************************************
// 直接套状态转移方程，根据 base case，可以做一些化简：

// dp[i][1][0] = max(dp[i-1][1][0], dp[i-1][1][1] + prices[i])
// dp[i][1][1] = max(dp[i-1][1][1], dp[i-1][0][0] - prices[i]) 
//             = max(dp[i-1][1][1], -prices[i])
// 解释：k = 0 的 base case 是dp[i-1][0][0] = 0。
// 意思是没有允许购买次数又不持有股票时利润恒为0

// 现在发现 k 都是 1，不会改变，即 k 对状态转移已经没有影响了。
// 可以进行进一步化简去掉所有 k：
// dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])
// dp[i][1] = max(dp[i-1][1], -prices[i])

// ***************************************************************************************
// 
// 动态规划的 5 个步骤：

// 1、设定状态
// 这道题其实是一个典型的二维 dp 问题。「动态规划」用于多阶段最优化问题的求解。
// 这里天数代表每个阶段，即一天一天看，设置为第一维。为了消除后效性
// （前面的状态确定下来以后不会因为后面状态而更改），将当天是否持股设置为第二维的状态。于是：

// 状态 dp[i][j] 表示：在下标为 i 的这一天，用户手上持股状态为 j 所获得的最大利润。

// 说明：

// j 只有 2 个值：0 表示不持股（特指卖出股票以后的不持股状态），1 表示持股。
// 「用户手上不持股」不代表用户一定在下标为 i 的这一天把股票抛售了；
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// 2、思考状态转移方程
// dp[i][0] 怎样转移？

// dp[i - 1][0] ：当然可以从昨天不持股转移过来，表示从昨天到今天什么都不操作，这一点是显然的；

// dp[i - 1][1] + prices[i]：昨天持股，就在下标为 i 的这一天，我卖出了股票，
// 状态由 1 变成了 0，此时卖出股票，因此加上这一天的股价。

// 综上：dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i]);
// -----------------------------------------------------------------------------------
// dp[i][1] 怎样转移？

// dp[i - 1][1] ：昨天持股，今天什么都不操作，当然可以从昨天持股转移过来，这一点是显然的；

// -prices[i]：注意：状态 1 不能由状态 0 来，因为事实上，状态 0 特指：
// 「卖出过一次股票以后不持有股票的状态」，请注意这个状态和
// 「没有进行过任何一次交易的不持有股票的状态」的区别。

// 为什么状态 0 特指「卖出过一次股票以后不持有股票的状态」？
// 从代码上理解:
// dp[0][0] = 0
// dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1] + prices[i]);
// 状态0是从1计算过来的

// 因此，-prices[i] 就表示，在下标为 i 的这一天，执行买入操作得到的收益。
// 注意：因为题目只允许一次交易，因此不能加上 dp[i - 1][0]。

// 综上：dp[i][1] = max(dp[i - 1][1], -prices[i]);
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// 3、考虑初始值
// 第 0 天不持股，显然 dp[0][0] = 0；

// 第 0 天持股，显然dp[0][1] = -prices[0]。
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// 4、考虑输出
// 从状态转移方程可以看出，每一天的状态都考虑了之前的状态。在只发生一次交易的情况下，
// 持有这支股票一定不能使我们获得最大利润。因此输出是 dp[len - 1][0]，
// 不可能是持股的状态 dp[len - 1][1]，
// 
// 时间复杂度：O(N)；
// 空间复杂度：O(N);
var maxProfit = function (prices) {
    let n = prices.length;
    if (n == 0) return 0;

    let dp = Array.from(new Array(n), () => new Array(2));
    for (let i = 0; i < n; i++) {
        if (i === 0) {
            dp[i][0] = 0
            dp[i][1] = -prices[i]
            continue
        }
        dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1] + prices[i]);
        dp[i][1] = Math.max(-prices[i], dp[i - 1][1]);
    }
    return dp[n - 1][0];
};

// var maxProfit = function (prices) {
//     let len = prices.length
//     if (len === 0) {
//         return 0
//     }
//     let dp = Array.from(new Array(len + 1), () => new Array(2))
//     dp[0][0] = 0
//     dp[0][1] = -prices[0]
//     for (let i = 1; i <= len; i++) {
//         const price = prices[i - 1];
//         dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1] + price)
//         dp[i][1] = Math.max(dp[i - 1][1], -price)
//     }
//     return dp[len][0]
// }
console.log(maxProfit([7, 1, 5, 3, 6, 4]))
// 根据递推公式，
// dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])
// dp[i][1] = max(dp[i - 1][1], -prices[i]);
// 求第i天的持有和不持有的最大收益时，只需要用到第i-1天的值就可以了
// i-1天之前的值可以忽略掉

// 求第i天不持有收益，只需要知道第i-1天持有收益，第i-1天不持有收益，第i天股价这几个变量
// 求第i天持有收益，只需要知道第i-1天持有收益，第i天股价

// 这样可以把空间复杂度降到 O(1):
// 时间复杂度：O(N)；
// 空间复杂度：O(1);
// 执行用时 :64 ms, 在所有 JavaScript 提交中击败了93.10%的用户
// 内存消耗 :35.7 MB, 在所有 JavaScript 提交中击败了46.71%的用户
var maxProfit = function (prices) {
    let n = prices.length;
    if (n == 0) return 0;

    var dp_i_0_prev = 0;
    var dp_i_1_prev = -prices[0];
    for (let i = 1; i < n; i++) {
        dp_i_0_prev = Math.max(dp_i_0_prev, dp_i_1_prev + prices[i]);  // 本来上一天就不持有或上一天持有，本天卖掉不持有(+price)
        dp_i_1_prev = Math.max(dp_i_1_prev, -prices[i]);    // 本来上一天就持有或上一天不持有，本天买入持有(-price)
    }
    return dp_i_0_prev;
};

console.log(maxProfit([7, 1, 5, 3, 6]))
